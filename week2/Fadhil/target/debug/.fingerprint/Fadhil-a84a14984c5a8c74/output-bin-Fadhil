{"message":"expected parameter name, found `,`","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":582,"byte_end":583,"line_start":23,"line_end":23,"column_start":22,"column_end":23,"is_primary":true,"text":[{"text":"    fn add_task (&mut, description: &str) -> Task{","highlight_start":22,"highlight_end":23}],"label":"expected parameter name","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected parameter name, found `,`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:23:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn add_task (&mut, description: &str) -> Task{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected parameter name\u001b[0m\n\n"}
{"message":"expected one of `(`, `,`, `.`, `::`, `?`, `}`, or an operator, found `:`","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":695,"byte_end":696,"line_start":26,"line_end":26,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"            description: description.to_string(),","highlight_start":24,"highlight_end":25}],"label":"expected one of 7 possible tokens","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":635,"byte_end":639,"line_start":24,"line_end":24,"column_start":24,"column_end":28,"is_primary":false,"text":[{"text":"        let new_task = Task {","highlight_start":24,"highlight_end":28}],"label":"while parsing this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try adding a comma","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":695,"byte_end":695,"line_start":26,"line_end":26,"column_start":24,"column_end":24,"is_primary":true,"text":[{"text":"            description: description.to_string(),","highlight_start":24,"highlight_end":24}],"label":null,"suggested_replacement":",","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected one of `(`, `,`, `.`, `::`, `?`, `}`, or an operator, found `:`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:26:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let new_task = Task {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwhile parsing this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            id: self.counter.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            description: description.to_string(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of 7 possible tokens\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: try adding a comma: `,`\u001b[0m\n\n"}
{"message":"invalid format string: expected `'}'`, found `'?'`","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1182,"byte_end":1182,"line_start":44,"line_end":44,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"    println!(\"Added task: {?}\", new_task);","highlight_start":28,"highlight_end":28}],"label":"expected `'}'` in format string","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1181,"byte_end":1182,"line_start":44,"line_end":44,"column_start":27,"column_end":28,"is_primary":false,"text":[{"text":"    println!(\"Added task: {?}\", new_task);","highlight_start":27,"highlight_end":28}],"label":"because of this opening brace","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you intended to print `{`, you can escape it using `{{`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: invalid format string: expected `'}'`, found `'?'`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:44:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    println!(\"Added task: {?}\", new_task);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `'}'` in format string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mbecause of this opening brace\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if you intended to print `{`, you can escape it using `{{`\u001b[0m\n\n"}
{"message":"expected value, found module `self`","code":{"code":"E0424","explanation":"The `self` keyword was used inside of an associated function without a \"`self`\nreceiver\" parameter.\n\nErroneous code example:\n\n```compile_fail,E0424\nstruct Foo;\n\nimpl Foo {\n    // `bar` is a method, because it has a receiver parameter.\n    fn bar(&self) {}\n\n    // `foo` is not a method, because it has no receiver parameter.\n    fn foo() {\n        self.bar(); // error: `self` value is a keyword only available in\n                    //        methods with a `self` parameter\n    }\n}\n```\n\nThe `self` keyword can only be used inside methods, which are associated\nfunctions (functions defined inside of a `trait` or `impl` block) that have a\n`self` receiver as its first parameter, like `self`, `&self`, `&mut self` or\n`self: &mut Pin<Self>` (this last one is an example of an [\"arbitrary `self`\ntype\"](https://github.com/rust-lang/rust/issues/44874)).\n\nCheck if the associated function's parameter list should have contained a `self`\nreceiver for it to be a method, and add it if so. Example:\n\n```\nstruct Foo;\n\nimpl Foo {\n    fn bar(&self) {}\n\n    fn foo(self) { // `foo` is now a method.\n        self.bar(); // ok!\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":821,"byte_end":825,"line_start":30,"line_end":30,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"        self.counter +=1;","highlight_start":9,"highlight_end":13}],"label":"`self` value is a keyword only available in methods with a `self` parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":568,"byte_end":576,"line_start":23,"line_end":23,"column_start":8,"column_end":16,"is_primary":false,"text":[{"text":"    fn add_task (&mut, description: &str) -> Task{","highlight_start":8,"highlight_end":16}],"label":"this function doesn't have a `self` parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"add a `self` receiver parameter to make the associated `fn` a method","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":579,"byte_end":579,"line_start":23,"line_end":23,"column_start":19,"column_end":19,"is_primary":true,"text":[{"text":"    fn add_task (&mut, description: &str) -> Task{","highlight_start":19,"highlight_end":19}],"label":null,"suggested_replacement":"&self, ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0424]\u001b[0m\u001b[0m\u001b[1m: expected value, found module `self`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:30:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn add_task (&mut, description: &str) -> Task{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis function doesn't have a `self` parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.counter +=1;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`self` value is a keyword only available in methods with a `self` parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add a `self` receiver parameter to make the associated `fn` a method\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn add_task (&\u001b[0m\u001b[0m\u001b[38;5;10m&self, \u001b[0m\u001b[0mmut, description: &str) -> Task{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"message":"expected value, found module `self`","code":{"code":"E0424","explanation":"The `self` keyword was used inside of an associated function without a \"`self`\nreceiver\" parameter.\n\nErroneous code example:\n\n```compile_fail,E0424\nstruct Foo;\n\nimpl Foo {\n    // `bar` is a method, because it has a receiver parameter.\n    fn bar(&self) {}\n\n    // `foo` is not a method, because it has no receiver parameter.\n    fn foo() {\n        self.bar(); // error: `self` value is a keyword only available in\n                    //        methods with a `self` parameter\n    }\n}\n```\n\nThe `self` keyword can only be used inside methods, which are associated\nfunctions (functions defined inside of a `trait` or `impl` block) that have a\n`self` receiver as its first parameter, like `self`, `&self`, `&mut self` or\n`self: &mut Pin<Self>` (this last one is an example of an [\"arbitrary `self`\ntype\"](https://github.com/rust-lang/rust/issues/44874)).\n\nCheck if the associated function's parameter list should have contained a `self`\nreceiver for it to be a method, and add it if so. Example:\n\n```\nstruct Foo;\n\nimpl Foo {\n    fn bar(&self) {}\n\n    fn foo(self) { // `foo` is now a method.\n        self.bar(); // ok!\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":884,"byte_end":888,"line_start":32,"line_end":32,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"        self.task.push(new_task);","highlight_start":9,"highlight_end":13}],"label":"`self` value is a keyword only available in methods with a `self` parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":568,"byte_end":576,"line_start":23,"line_end":23,"column_start":8,"column_end":16,"is_primary":false,"text":[{"text":"    fn add_task (&mut, description: &str) -> Task{","highlight_start":8,"highlight_end":16}],"label":"this function doesn't have a `self` parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"add a `self` receiver parameter to make the associated `fn` a method","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":579,"byte_end":579,"line_start":23,"line_end":23,"column_start":19,"column_end":19,"is_primary":true,"text":[{"text":"    fn add_task (&mut, description: &str) -> Task{","highlight_start":19,"highlight_end":19}],"label":null,"suggested_replacement":"&self, ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0424]\u001b[0m\u001b[0m\u001b[1m: expected value, found module `self`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:32:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn add_task (&mut, description: &str) -> Task{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis function doesn't have a `self` parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.task.push(new_task);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`self` value is a keyword only available in methods with a `self` parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add a `self` receiver parameter to make the associated `fn` a method\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn add_task (&\u001b[0m\u001b[0m\u001b[38;5;10m&self, \u001b[0m\u001b[0mmut, description: &str) -> Task{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"message":"missing field `description` in initializer of `Task`","code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":635,"byte_end":639,"line_start":24,"line_end":24,"column_start":24,"column_end":28,"is_primary":true,"text":[{"text":"        let new_task = Task {","highlight_start":24,"highlight_end":28}],"label":"missing `description`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0063]\u001b[0m\u001b[0m\u001b[1m: missing field `description` in initializer of `Task`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:24:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let new_task = Task {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `description`\u001b[0m\n\n"}
{"message":"no method named `add_task` found for struct `TaskManager` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":268,"byte_end":286,"line_start":9,"line_end":9,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"struct TaskManager {","highlight_start":1,"highlight_end":19}],"label":"method `add_task` not found for this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1122,"byte_end":1130,"line_start":43,"line_end":43,"column_start":33,"column_end":41,"is_primary":true,"text":[{"text":"    let new_task = task_manager.add_task(\"Complete assignment\");","highlight_start":33,"highlight_end":41}],"label":"this is an associated function, not a method","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"found the following associated functions; to be used as methods, functions must have a `self` parameter","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the candidate is defined in an impl for the type `TaskManager`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":565,"byte_end":610,"line_start":23,"line_end":23,"column_start":5,"column_end":50,"is_primary":true,"text":[{"text":"    fn add_task (&mut, description: &str) -> Task{","highlight_start":5,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use associated function syntax instead","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1109,"byte_end":1153,"line_start":43,"line_end":43,"column_start":20,"column_end":64,"is_primary":true,"text":[{"text":"    let new_task = task_manager.add_task(\"Complete assignment\");","highlight_start":20,"highlight_end":64}],"label":null,"suggested_replacement":"TaskManager::add_task(task_manager, \"Complete assignment\")","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `add_task` found for struct `TaskManager` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:43:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct TaskManager {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `add_task` not found for this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let new_task = task_manager.add_task(\"Complete assignment\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthis is an associated function, not a method\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: use associated function syntax instead: `TaskManager::add_task(task_manager, \"Complete assignment\")`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: found the following associated functions; to be used as methods, functions must have a `self` parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the candidate is defined in an impl for the type `TaskManager`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:23:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn add_task (&mut, description: &str) -> Task{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to 7 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 7 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0063, E0424, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0063, E0424, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0063`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0063`.\u001b[0m\n"}
